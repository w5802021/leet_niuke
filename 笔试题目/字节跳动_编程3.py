N, M,P = 2,2,5

class idea:
    def __init__(self, pm, tt, prio, cost, idx):
        self.pm = pm
        self.tt = tt
        self.prio = prio
        self.cost = cost
        self.idx = idx

import heapq
from queue import PriorityQueue as pque

# pm对idea的优先级比较
class cmp_by_pm(idea):

    def __lt__(self, other):
        if self.prio > other.prio:
            return True
        elif self.prio == other.prio:
            return self.cost < other.cost
        elif self.cost == other.cost:
            return self.tt < other.tt
        else:
            return False

# cder对idea的优先级比较
class cmp_by_cder(idea):

    def __lt__(self, other):
        if self.cost < other.cost:
            return True
        elif self.cost == other.cost:
            return self.pm < other.pm
        else:
            return False

ideas = []

ideas.append(idea(1-1, 1, 1, 2, 0))
ideas.append(idea(1-1, 2, 1, 1, 1))
ideas.append(idea(1-1, 3, 2, 2, 2))
ideas.append(idea(2-1, 1, 1, 2, 3))
ideas.append(idea(2-1, 3, 5, 5, 4))

# n = '9 675 233 9 60 976 96 8 3 1375 943 43 65 1886 963 21 91 1561 597 47 61 1821 30 31 30 1711 616 40 40 784 521 17 10 731 733 12 52 1321 832 34 100 894 441 1 42 125 84 39 44 343 940 33 9 1344 620 27 7 754 334 36 49 439 608 49 47 38 699 30 48 405 694 50 26 1491 317 26 5 234 558 9 36 437 132 29 36 624 187 27 60 657 60 45 30 1749 304 38 44 1532 519 34 99 55 795 9 74 16 328 27 37 827 367 45 70 1391 194 21 65 1830 1000 21 26 1032 956 13 44 457 261 40 14 1506 913 23 38 1101 377 47 37 840 784 8 50 19 901 16 72 1160 239 4 53 1453 758 39 80 1301 164 47 79 847 539 7 9 730 467 24 44 495 571 1 58 415 267 49 92 1832 217 23 89 1634 381 39 11 1258 501 35 73 1126 638 37 70 1835 347 17 95 713 973 16 14 86 236 41 65 50 589 2 67 926 466 44 2 458 467 29 50 1250 211 46 20 861 259 33 38 734 823 32 18 667 132 45 94 1647 752 30 28 1604 634 2 46 334 420 42 13 287 931 47 24 159 462 42 81 815 879 19 87 1838 599 42 84 1415 72 3 27 1887 489 20 2 995 115 5 65 957 562 38 38 623 695 46 24 1079 487 31 10 58 375 21 72 761 807 47 98 1337 717 22 3 104 41 11 4 281 468 11 75 319 768 37 39 1206 373 12 96 277 787 2 68 690 275 21 91 1828 378 36 27 805 57 41 41 1322 639 46 37 955 350 41 73 396 332 29 10 481 373 49 41 1644 995 23 58 1577 452 28 35 1078 556 1 96 1450 869 15 52 1074 364 16 35 671 692 39 74 1581 392 7 55 1381 962 25 49 148 490 33 30 1468 869 15 50 580 594 3 77 598 300 14 48 273 708 22 31 281 886 33 89 254 826 29 78 1295 171 34 16 1323 623 29 67 1737 628 2 73 1245 977 49 47 1370 550 48 32 1554 320 6 43 1073 586 18 20 1652 986 1 29 786 729 19 50 1283 758 5 28 1423 645 22 14 348 749 16 6 551 221 34 32 554 66 48 40 418 42 24 41 470 219 6 39 1016 464 19 62 1596 216 15 92 418 887 5 27 1595 330 44 66 594 83 9 71 171 642 45 83 1235 3 1 89 780 822 4 94 949 425 48 75 1876 930 39 41 804 769 48 63 316 633 43 99 1480 82 31 84 932 56 15 16 635 41 20 93 1885 771 1 31 73 217 46 57 481 300 13 4 1761 737 13 63 304 499 26 20 408 942 30 72 446 62 37 23 629 254 17 49 879 72 29 39 1445 878 4 16 1088 859 5 64 1422 437 34 81 1301 624 32 71 867 880 36 39 1458 86 14 66 741 95 38 97 403 677 26 35 1048 200 47 98 1253 713 38 35 1413 631 46 56 1418 869 11 40 269 665 37 82 494 502 31 51 125 3 1 83 202 814 28 21 55 317 41 73 87 966 40 79 698 922 21 13 1815 51 2 73 969 733 9 91 947 867 49 59 1747 46 41 91 492 551 40 8 391 471 49 60 684 493 12 36 975 70 29 26 974 369 23 95 1297 10 4 98 973 375 1 31 95 331 34 93 1323 425 13 54 1581 313 8 86 670 56 14 97 916 843 25 32 262 892 23 83 16 446 40 88 738 684 29 89 1585 732 48 10 1474 412 21 47 828 95 43 43 1702 252 32 65 583 77 22 69 196 670 49 94 1828 927 19 18 376 972 50 41 953 679 31 19 1038 842 1 70 187 865 38 85 1101 667 36 49 492 332 40 63 228 702 41 78 263 879 34 92 1042 584 32 32 173 170 16 24 1594 438 36 15 906 550 3 80 25 833 17 45 1764 138 20 78 605 248 15 16 1007 283 2 46 682 173 18 78 1746 645 18 67 490 513 26 4 808 420 33 99 587 948 18 33 789 723 17 60 849 70 44 75 174 237 23 57 428 157 11 100 697 596 12 4 1167 997 26 85 1575 549 47 86 1636 747 20 38 465 960 26 34 130 427 39 1 1547 569 24 73 1319 816 2 58 524 572 50 31 690 979 33 53 1162 784 17 80 1856 216 20 7 1526 440 19 34 1063 871 4 25 76 298 12 31 873 940 48 17 1657 540 27 43 1436 693 46 36 929 756 33 82 384 59 49 56 780 442 36 49 1600 659 23 48 546 391 25 74 731 168 46 33 1173 98 13 92 261 837 24 53 97 239 40 42 1246 339 25 41 575 211 26 5 730 63 9 60 777 471 46 98 869 790 33 50 750 955 37 47 257 527 5 83 812 522 44 38 38 184 9 64 449 993 18 69 1003 629 39 54 1418 257 12 73 1268 738 47 48 1731 771 26 97 756 354 19 7 1516 746 14 60 394 216 46 26 232 187 44 4 1169 511 6 10 629 14 45 54 957 53 1 27 115 685 38 33 1663 273 14 94 248 882 17 15 292 234 47 99 813 651 30 34 1281 148 27 15 1825 200 34 85 922 725 31 96 1590 596 46 43 1195 532 29 36 1113 392 29 51 1466 714 22 50 343 858 15 97 1899 115 9 61 1588 768 33 8 385 794 6 32 1209 430 32 57 1665 618 39 38 994 12 29 1 1312 576 29 64 883 183 7 1 1171 278 6 90 685 441 21 76 1030 988 33 33 1658 695 30 26 742 274 12 94 502 454 35 39 967 277 22 40 969 982 13 75 355 11 5 91 1363 684 27 24 682 385 43 5 1589 178 19 75 1460 886 15 62 861 555 32 98 332 209 49 68 157 667 40 2 1616 413 24 33 77 28 9 83 361 189 32 87 434 199 9 68 181 747 14 50 1778 425 31 37 853 264 36 64 1761 61 8 86 1069 957 2 2 893 770 46 98 388 604 43 28 834 713 31 95 250 343 47 88 1370 833 40 60 189 330 1 4 133 816 38 71 127 313 15 62 1147 904 13 45 924 837 28 53 1788 733 7 40 1556 665 17 46 251 197 7 56 270 471 28 97 1463 811 41 20 1705 707 7 60 734 36 9 71 1589 746 1 47 607 82 40 13 530 250 45 29 1230 742 15 35 1579 224 23 39 31 13 15 77 778 155 23 48 1118 458 4 89 1509 82 50 93 1834 182 47 95 96 679 11 64 1103 312 41 25 632 295 5 20 53 922 21 55 956 956 44 97 1535 101 29 80 54 991 24 36 1343 748 4 68 1131 2 49 86 1518 731 20 83 1852 41 38 96 1179 693 3 15 1145 957 27 28 1748 425 50 23 601 487 6 10 781 959 3 28 1602 190 38 61 1719 255 14 83 940 465 20 93 1597 409 31 14 1641 539 4 96 107 427 45 63 344 71 4 50 1118 463 40 49 891 285 14 10 69 442 9 13 841 785 14 67 1183 967 21 23 73 24 8 57 754 400 46 81 924 272 31 86 255 881 38 82 205 469 32 59 1051 811 28 90 918 710 23 57 312 378 32 36 578 134 44 46 254 551 16 41 607 221 7 44 595 868 12 99 1750 219 45 40 1233 496 15 82 583 558 6 60 750 423 50 82 183 874 2 49 1467 471 5 38 1423 725 38 74 1381 587 3 8 423 924 20 37 1532 361 40 25 554 755 18 95 1620 768 17 8 819 940 10 66 678 938 27 17 436 78 27 76 826 435 22 39 8 430 42 95 1132 956 22 79 742 240 14 35 494 155 34 70 1494 832 20 62 298 132 4 34 897 514 44 47 639 772 14 13 792 468 38 66 205 578 6 54 1376 973 32 69 966 443 38 33 593 531 2 54 1339 470 1 84 360 882 27 94 335 425 22 61 358 646 45 9 538 309 45 20 836 574 12 78 191 958 44 76 1749 995 42 44 384 592 26 91 682 1000 12 33 56 664 30 79 1732 541 18 91 386 384 16 42 112 25 46 6 779 700 38 95 1869 635 33 5 1893 278 37 45 788 68 47 37 1261 734 15 80 136 276 22 53 1841 825 4 32 488 793 16 95 1737 624 28 42 438 975 6 60 1804 488 46 97 834 267 23 100 443 335 50 35 726 405 40 85 1764 628 21 29 252 466 22 92 927 986 7 85 472 417 3 86 1041 724 7 82 1396 466 1 74 928 85 6 71 1451 822 37 41 264 120 22 94 1189 229 3 47 862 596 31 79 1636 384 37 36 655 805 30 59 590 384 9 97 1888 223 11 57 747 315 10 65 1076 721 23 11 1882 622 14 11 1801 887 43 87 1357 596 24 3 1892 458 46 55 876 871 6 95 407 810 19 93 804 706 46 52 405 215 47 78 901 640 3 28 1114 522 26 17 1671 879 7 60 1163 449 15 93 797 700 19 50 139 391 12 22 572 953 23 13 518 532 12 4 27 898 21 6 30 545 20 96 596 802 10 16 1354 940 32 53 1328 128 1 44 902 439 50 60 1676 678 33 51 263 651 11 1 1519 745 46 90 639 31 49 97 1195 165 2 57 515 830 38 82 1656 751 6 70 1217 425 28 17 1860 911 34 23 581 959 24 59 920 328 45 24 470 83 22 62 1457 223 29 62 1682 90 17 35 1183 644 37 95 1779 30 47 1 819 548 19 93 249 870 48 59 185 294 32 60 407 19 19 83 967 737 36 53 1840 301 32 39 364 367 34 69 1772 49 22 59 447 940 22 54 194 80 23 12 54 443 6 63 169 2 15 56 98 691 23 49 1228 63 19 37 412 649 29 92 316 231 31 5 1767 212 22 92 468 516 40 58 469 86 20 1 1206 133 13 9 406 830 34 43 457 272 11 45 813 955 7 66 1440 551 38 62 1201 767 14 92 1243 502 10 55 1024 635 43 73 956 580 1 38 120 434 50 70'
# for i in range(1000):
#     g = n.split(' ')
#     res = g[i:i+4]
#     ideas.append(idea(int(res[0]), int(res[1]), int(res[2]), int(res[3]), i))

res = [0] * P
idea_state = [0] * P
cder_state = [0] * M

cur_time = 1
cur_cost = 0
# 已完成的任务
count = 0
# 已推入cur_idea的任务
p = 0

cur_idea = []
cur_ideas = [[] for _ in range(N)]

ideas.sort(key=lambda x:x.tt)
while count < P:
    while (p < P and ideas[p].tt <= cur_time):
        _pm = ideas[p].pm
        heapq.heappush(cur_ideas[_pm],cmp_by_pm(ideas[p].pm, ideas[p].tt, ideas[p].prio, ideas[p].cost, ideas[p].idx))
        p += 1
    # 将要做的idea队列
    task_queue = []
    heapq.heapify(task_queue)
    # 在产品经理中找到提出的idea
    for i in range(N):
        if cur_ideas[i]:
            b = cur_ideas[i][0]
            heapq.heappush(task_queue,cmp_by_cder(cur_ideas[i][0].pm, cur_ideas[i][0].tt, cur_ideas[i][0].prio,
                                                  cur_ideas[i][0].cost, cur_ideas[i][0].idx))

    # 更新程序员的剩余工作时间，为空闲程序员分配工作
    for i in range(M):
        if cder_state[i] > 0:
            cder_state[i] -= 1

        if cder_state[i] == 0 and task_queue:
            task = heapq.heappop(task_queue)
            heapq.heappop(cur_ideas[task.pm])
            # 这要取当前完成的idea（task）对应的pm去取下一个值
            if cur_ideas[task.pm]:
                bb = cur_ideas[task.pm][0]
                heapq.heappush(task_queue, cmp_by_cder(cur_ideas[task.pm][0].pm, cur_ideas[task.pm][0].tt,
                                                       cur_ideas[task.pm][0].prio,
                                                       cur_ideas[task.pm][0].cost, cur_ideas[task.pm][0].idx))

            cder_state[i] = task.cost
            res[task.idx] = cur_time + task.cost
            count += 1
    cur_time += 1
print('\n'.join(str(x) for x in res))







